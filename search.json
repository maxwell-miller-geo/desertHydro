[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 desertHydro authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Elevation_Adjustments_in_Stream_Networks.html","id":"libraries","dir":"Articles","previous_headings":"","what":"Libraries","title":"Elevation Adjustments in Stream Networks","text":"Let’s take look study area Waterholes located Northern Arizona tributary Grand Canyon. spatial resolution 3DEP DEM ~10m. Perform hydrological analysis Whitebox tools! Wrapped desertHydro package.","code":"library(desertHydro) library(terra) library(whitebox) library(ggplot2) library(htmltools) library(data.table) # usethis::use_data_table() # Ensure whitebox executable works whitebox::wbt_init(   exe_path = whitebox::wbt_exe_path(shell_quote = FALSE),   check_version = TRUE ) library(devtools) # example digital elevation model within the desertHydro package dem_path <- system.file(\"extdata\", \"dem.tif\", package = \"desertHydro\") dem <- terra::rast(dem_path) terra::plot(dem, main = \"DEM Waterholes, AZ\",             plg = list(title = \"Elevation (m)\"))"},{"path":"/articles/Elevation_Adjustments_in_Stream_Networks.html","id":"files-created","dir":"Articles","previous_headings":"","what":"Files created","title":"Elevation Adjustments in Stream Networks","text":"Many files created function. function works wrapper stream functions within Whitebox package. Adjust DEM Now, adjusted DEM look significantly different scale. Let’s check differences.","code":"# Files created list.files(ModelFolder) terra::plot(mod_dem, main = \"Adjusted DEM Waterholes, AZ\",             cex.main = .8,             plg = list(title = \"Elevation (m)\", title.cex = .8)) # Use terra's ifel function to spot the differences elevation_diff <- terra::ifel(dem - mod_dem != 0, 1, 0) terra::plot(elevation_diff, main = \"Elevation Adjustments\",             cex.main = .8,             plg = list(title = \"Elevation Change\", title.cex = .8))"},{"path":"/articles/Elevation_Adjustments_in_Stream_Networks.html","id":"observe-channel-profiles---through-whitebox-tools","dir":"Articles","previous_headings":"","what":"Observe Channel Profiles - through whitebox tools","title":"Elevation Adjustments in Stream Networks","text":"look along channel profiles? graphic produced whitebox tools elevations change streams? Now, profile isn’t adjusted much. spatially distributed water model water pool within valleys. Let’s adjust elevations smooth remove holes, channel.","code":"stream_network <- terra::vect(file.path(ModelFolder, \"stream_network.shp\")) head(stream_network) plot(stream_network, \"STRAHLER\", main = \"Strahler Stream Order\", plg = (title = \"Order\")) library(htmltools) profile <- file.path(ModelFolder, \"profile.html\") htmltools::includeHTML(profile) demExt <- terra::extractAlong(dem, stream_network) demAdjusted <- terra::extractAlong(mod_dem, stream_network)  # Grab one length of the channel by the ID stream_seg_dem <- demExt[which(demExt$ID == 1),2] stream_seg_mod_dem <- demAdjusted[which(demAdjusted$ID == 1),2] stream_length <- 1:length(stream_seg_dem)  # Combine into a data frame df <- data.frame(x = stream_length,                  orig_dem = stream_seg_dem,                  adjusted_dem = stream_seg_mod_dem) # Take only a section of the channel, so it is more easily discernible df2 <- df[1:50,] # 1st 100 rows ggplot(df2) + geom_line(aes(x, orig_dem), color = \"purple\") + geom_point(aes(x, adjusted_dem), color = \"blue\") + labs(title = \"Elevation Profile of Stream Segment\") # Obtain saved flow accumulation map stream_network <- terra::vect(file.path(ModelFolder, \"stream_network.shp\")) dem_path <- system.file(\"extdata\", \"dem.tif\", package = \"desertHydro\") mod_dem_path <- file.path(ModelFolder, \"model_dem.tif\") carve_dem <- smoothStream(stream_network, dem_path) carveExtract <- terra::extractAlong(carve_dem, stream_network, ID = TRUE)  df$carve <- carveExtract[which(carveExtract$ID == 1),2] q <- carveExtract[which(carveExtract$ID == 1),2] df2 <- df[1:50,] cols <- c(\"orig_dem\" = \"purple\", \"adjusted_dem\" = \"blue\", \"carve\" = \"red\") ggplot(df2, aes(x = x)) + geom_point(aes(y=orig_dem, color = \"orig_dem\")) +             geom_line(aes(y=adjusted_dem, color = \"adjusted_dem\")) +             geom_line(aes(y=carve, color = \"carve\")) +             labs(title = \"Elevation Profile of Stream Segment\") +             scale_color_manual(values = cols,                                breaks = c(\"orig_dem\", \"adjusted_dem\", \"carve\"),                                labels = c(\"Original DEM\", \"Breached DEM\", \"Smoothed DEM\"))"},{"path":"/articles/watershedWorkflow.html","id":"load-in-the-necessary-libraries","dir":"Articles","previous_headings":"","what":"Load in the necessary libraries","title":"watershedWorkflow","text":"","code":"library(desertHydro) library(terra) library(ggplot2) # For plotting library(gganimate) # For animations library(whitebox) #require(whitebox) whitebox::wbt_init(   exe_path = whitebox::wbt_exe_path(shell_quote = FALSE),   check_version = TRUE )"},{"path":"/articles/watershedWorkflow.html","id":"model-set-up","dir":"Articles","previous_headings":"","what":"Model Set-up","title":"watershedWorkflow","text":"desertHydro package split three levels.","code":""},{"path":"/articles/watershedWorkflow.html","id":"pre-process-create-and-gather-necessary-files","dir":"Articles","previous_headings":"Model Set-up","what":"1 Pre-process: Create and gather necessary files","title":"watershedWorkflow","text":"Model Folder -> save outputs model WatershedElements Folder -> folder containing necessary inputs model run. priority model utilize intersection land cover types, soil profiles soil databases, adjustable tables (excel files) model particular rainfall event. Necessary Inputs: 1) DEM digital elevation file 2) Manning’s n surface roughness map (.tif .shp) embedded within land cover file two elements, model can run impervious mode (impervious = T)","code":"# Important steps  ModelFolder <- \"ModelFolder\" # replace path to folder where model is saved ModelFolder <- tempdir() #ModelFolder <- r\"(C:\\PackageDev\\desertHydro\\ModelElementsTest)\" # <- Example  #WatershedElements <- \"./inst/extdata/DemoElements\" # replace this with your watershed WatershedElements <- dirname(system.file(\"extdata\", \"dem.tif\", package = \"desertHydro\")) # replace this with your watershedelements folder # Checking model folder # WatershedElements <- r\"(C:\\PackageDev/desertHydro/inst/extdata/DemoElements/)\" # replace this with your watershed elements folder demFile <- \"dem.tif\" # DEM file to simulate over - should be named smooth/dem.tif  # Check if watershed elements folder exists WatershedElements <- folderCheck(WatershedElements, demFile)  boundary <- \"test-boundary.shp\" # Name of shapefile for outline landCoverFile <- \"soils.shp\" # name of soils data LandCoverCharacteristics <- \"LandCoverCharacteristics_Soils.xlsx\" key <- \"MUSYM\" # key is present in both the landcoverfile and the land cover characteristics"},{"path":"/articles/watershedWorkflow.html","id":"note","dir":"Articles","previous_headings":"","what":"Note:","title":"watershedWorkflow","text":"One key aspects map ensure soil characteristics can cross referenced input data table. three things need present adding soil characteristics. ### 1) Land cover spatial file: .shp .tif ### 2) Land cover characteristics: excel file containing soil depth characteristics ### 3) Key: character string present attribute table spatial file excel file.","code":""},{"path":"/articles/watershedWorkflow.html","id":"rainfall-event-elements","dir":"Articles","previous_headings":"Note:","what":"Rainfall event elements","title":"watershedWorkflow","text":"","code":"date <- \"2018-07-13\" # Optional - if dates present must be in YYYY-MM-DD format rainFile <- \"USGS_Rain_2001_2021.xlsx\" dischargeFile <- \"observable-discharge.csv\" discharge = T # If TRUE, expects discharge present in file  # If rainfall method is synthetic - uses 1/2 inch - 15 minute storm rainfall_method <- \"synthetic\""},{"path":"/articles/watershedWorkflow.html","id":"model-elements","dir":"Articles","previous_headings":"Note:","what":"Model elements","title":"watershedWorkflow","text":"","code":"length <- 10 # grid cell length - assumes uniform grid store = T time_step <- .1 # time step in minutes simulation_length <-  1 # time length in minutes impervious <- T  # no infiltration overwrite <- T # overwrite watershed elements and model folder write <- T # create graphs and write outputs to model folder restartModel <- F # If model is paused mid-run, can be restarted with same inputs gif <- F # If TRUE, gif's will be created automatically. Can be created at the end"},{"path":"/articles/watershedWorkflow.html","id":"check-if-necessary-files-are-present","dir":"Articles","previous_headings":"Note:","what":"Check if necessary files are present","title":"watershedWorkflow","text":"","code":"# Check if the necessary folders are present foldersToCheck <- c(WatershedElements) folders <- sapply(foldersToCheck, FUN = file.exists) if(!all(folders)){   print(paste0(\"All folders not found. List of folders not found.\"))   print(folders) } # Check if the necessary files are present filesToCheck <- c(demFile, boundary, landCoverFile,                    LandCoverCharacteristics, rainFile, dischargeFile) filesCheck <- sapply(file.path(WatershedElements, filesToCheck),                       FUN = file.exists) if(!all(filesCheck)){   print(\"All files are not found. Here is a list of the files present.\")   print(filesCheck) }else{   print(\"All files found.\") }"},{"path":"/articles/watershedWorkflow.html","id":"model-run---off-and-running","dir":"Articles","previous_headings":"","what":"2 Model Run - off and running","title":"watershedWorkflow","text":"model create files within Model Folder runs. length simulation based size grid, initial timestep, duration. always encouraged run small scale version space time determine things working properly.","code":"a <- arid_model(ModelFolder,                 WatershedElements,                 date = date,                 demFile = demFile,                 boundary = boundary,                 landCoverFile = landCoverFile,                 LandCoverCharacteristics = LandCoverCharacteristics,                 key = key,                 impervious = impervious,                 rainfall_method = rainfall_method,                 store = store,                 gif = gif,                 discharge = discharge,                 time_step = time_step,                 simulation_length = simulation_length,                 overwrite = overwrite,                 write = write,                 restartModel = restartModel                 )"},{"path":"/articles/watershedWorkflow.html","id":"post-processing","dir":"Articles","previous_headings":"","what":"3 Post processing","title":"watershedWorkflow","text":"model run, many files present within Model Folder can viewed -situ loaded R viewing.","code":"# Rain file to grab the necessary rainfall method #rain_file <- desertHydro:::rainfallMethodCheck(ModelFolder, rainfall_method) gifs <- desertHydro::gifCreation(ModelFolder, rainfall_method,                                    discharge = F, saveGraph = T)"},{"path":"/articles/watershedWorkflow.html","id":"surface-gif","dir":"Articles","previous_headings":"","what":"Surface gif","title":"watershedWorkflow","text":"","code":"#gifs[[1]] # surface gif"},{"path":"/articles/watershedWorkflow.html","id":"velocity-gif","dir":"Articles","previous_headings":"","what":"Velocity gif","title":"watershedWorkflow","text":"","code":"#gifs[[2]] # velocity gif"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maxwell Miller. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Miller M (2024). desertHydro: Spatially Distributed Hydrology Model Arid Watersheds. R package version 0.0.0.9001, https://maxwell-miller-geo.github.io/desertHydro/.","code":"@Manual{,   title = {desertHydro: Spatially Distributed Hydrology Model for Arid Watersheds},   author = {Maxwell Miller},   year = {2024},   note = {R package version 0.0.0.9001},   url = {https://maxwell-miller-geo.github.io/desertHydro/}, }"},{"path":"/index.html","id":"deserthydro","dir":"","previous_headings":"","what":"Spatially Distributed Hydrology Model for Arid Watersheds","title":"Spatially Distributed Hydrology Model for Arid Watersheds","text":"goal desertHydro create spatially distributed hydrological model built R tools!","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatially Distributed Hydrology Model for Arid Watersheds","text":"can install development version desertHydro GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"maxwell-miller-geo/desertHydro\")"},{"path":"/index.html","id":"expected-workflow","dir":"","previous_headings":"","what":"Expected Workflow","title":"Spatially Distributed Hydrology Model for Arid Watersheds","text":"special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy .","code":"library(desertHydro) ## basic example code"},{"path":"/reference/arid_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Desert Hydrology Model Full Suite — arid_model","title":"Desert Hydrology Model Full Suite — arid_model","text":"Desert Hydrology Model Full Suite","code":""},{"path":"/reference/arid_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Desert Hydrology Model Full Suite — arid_model","text":"","code":"arid_model(   ModelFolder,   WatershedElements,   demFile = \"dem.tif\",   date = NULL,   boundary = NA,   landCoverFile = \"landcover_soil.tif\",   LandCoverCharacteristics = \"LandCoverCharacteristics_soils.xlsx\",   key = \"NLCD_Key\",   impervious = F,   rainfall_method = \"gauges\",   store = T,   gif = T,   discharge = F,   time_step = 0.25,   simulation_length = NA,   overwrite = T,   write = T,   restartModel = F,   ... )"},{"path":"/reference/arid_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Desert Hydrology Model Full Suite — arid_model","text":"ModelFolder designated folder path save outputs files. script write modify elements present within output folder. WatershedElements folder path contains necessary components create run hydrological model. demFile Name digital elevation file within WatershedElements. Defaults \"dem.tif\" date Optional date string. must format \"YYYY-MM-DD\". date evaluated pull necessary event information downloaded .csv files - rain discharge data. flexible based formatting event file date columns. Uses tidyverse packages filter date information. boundary Optional: T/F: TRUE, crop using terra::crop datasets boundary layer. Boundary extent mismatches spatial data prevent successful model simulations. landCoverFile Optional: Default NA: Expects string format land cover tif file e.g. \"landcover.tif\" present within WatershedElements fold. Note: changed, key parameter needs changed match category column name. See vignette expected structure. LandCoverCharacteristics Optional: Default \"LandCoverCharacteristics.xlsx\": Excel spreadsheet contains hydrological characteristics, importantly Manning's n values different land cover types found within landCoverFile. Note: input, 'key' parameter must match attributes within land cover file, .tif .shp, column header within excel spreadsheet. key Optional: Default: \"NLCD_Key\" string name land cover types excel table land cover map \".tif\". convert excel table hydrological characteristics stacked raster map layer corresponding hydrological characteristic spatially distributed . See vignette expected structure. impervious Optional: T/F: TRUE, model calculate runoff without infiltration. Can used perform quicker model simulations determine sensitivity runoff potential. rainfall_method Optional rainfall method string. Default \"gauges\" creates weighted average rainfall within given watershed. \"gauges\" data must formatted correctly apply rainfall. additional options rainfall see documenatatin rainfallCreate. store Optional: T/F: TRUE, store graphs plots ModelFolder gif Optional: T/F: TRUE, create gif animations typical outputs - Surface water depth, surface water velocity, soil moisture. discharge Optional: T/F: TRUE, script use observed discharge data -expected format \".tsv\"- modify simulation length create compiled hydrographs containing predicted observed discharges. Expects ESRI shapefile point gauged location named \"gauges.shp\" within WatershedElements folder. time_step Optional based time step fraction minutes. Defaults 1 minute. Recommended: 0.25 - 1 minute. time step default evaluation time step model. script dynamically adjust time step based calculated surface velocities. simulation_length Optional length simulation minutes. Defaults rainfall duration + discharge duration. reduce size computational boundary. Best used testing smaller portions watershed. Large computational areas + 1 million cells take considerable time depending length simulation. overwrite Optional: T/F: TRUE, overwrite elements within WatershedElements folder ModelFolder necessary. write Optional write outputs model. Default = TRUE restartModel Optional: T/F: TRUE, model attempt restart last recorded time water surface elevations Note: files within Model Folder edited, may work. ... Additional parameters pass inner functions.","code":""},{"path":"/reference/arid_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Desert Hydrology Model Full Suite — arid_model","text":"Returns nothing outputs written input model folder","code":""},{"path":"/reference/arid_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Desert Hydrology Model Full Suite — arid_model","text":"","code":"if (FALSE) { # Change this to output folder ModelFolder <- r\"(C:/Thesis/Arid-Land-Hydrology/R/Example/SampleModel)\" WatershedElements <- file.path(\"inst/extdata/DemoElements\") # demo elements arid_model(ModelFolder, WatershedElements) }"},{"path":"/reference/desertHydro-package.html","id":null,"dir":"Reference","previous_headings":"","what":"desertHydro: Spatially Distributed Hydrology Model for Arid Watersheds — desertHydro-package","title":"desertHydro: Spatially Distributed Hydrology Model for Arid Watersheds — desertHydro-package","text":"desertHydro watershed model simulates surface shallow subsurface flow input rainfall event. primary flow routing algorithm modified Soil Moisture Routing (SMR) algorithm. user inputs digital elevation model (DEM), watershed boundary, (shapefile), soil characteristics, precipitation data. model outputs stacked tif files timestep layer including velocity, soil moisture, surface depth. Optionally, stacked rasters can converted gifs visual aids. Note - still early stages development.","code":""},{"path":[]},{"path":"/reference/desertHydro-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"desertHydro: Spatially Distributed Hydrology Model for Arid Watersheds — desertHydro-package","text":"Maintainer: Maxwell Miller mmm683@nau.edu (ORCID)","code":""},{"path":"/reference/dischargeAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Discharge Analysis after desertHydro simulation — dischargeAnalysis","title":"Discharge Analysis after desertHydro simulation — dischargeAnalysis","text":"Discharge Analysis desertHydro simulation","code":""},{"path":"/reference/dischargeAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discharge Analysis after desertHydro simulation — dischargeAnalysis","text":"","code":"dischargeAnalysis(   ModelFolder,   WatershedElements,   time_step,   simulation_length,   discharge = F,   store = T,   date = NULL )"},{"path":"/reference/dischargeAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discharge Analysis after desertHydro simulation — dischargeAnalysis","text":"ModelFolder Model Folder saved outputs WatershedElements Watershed Folder Watershed components. Assumes time_step Time minutes simulation_length Length simulation minutes discharge T/F: Default TRUE: TRUE, look observed discharge hydrographs store T/F: Default TRUE: TRUE, store created plots ModelFolder date string. Optional plotting setting add date title output file.","code":""},{"path":"/reference/dischargeAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discharge Analysis after desertHydro simulation — dischargeAnalysis","text":"Returns discharge excel table plots model simulation","code":""},{"path":"/reference/dischargeAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discharge Analysis after desertHydro simulation — dischargeAnalysis","text":"","code":"if (FALSE) { dischargeAnalysis(ModelFolder, WatershedElements, time_step, simulation_length) #See vignette }"},{"path":"/reference/flow_accumlation_wb.html","id":null,"dir":"Reference","previous_headings":"","what":"Hydrological pre-processing workflow for digital elevation models — flow_accumlation_wb","title":"Hydrological pre-processing workflow for digital elevation models — flow_accumlation_wb","text":"Hydrological pre-processing workflow digital elevation models","code":""},{"path":"/reference/flow_accumlation_wb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hydrological pre-processing workflow for digital elevation models — flow_accumlation_wb","text":"","code":"flow_accumlation_wb(   dem_file_path,   ModelFolder,   watershed_shape_path = NA,   max_dist = 1000,   stream_threshold = 1200,   carve = 1,   overwrite = T )"},{"path":"/reference/flow_accumlation_wb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hydrological pre-processing workflow for digital elevation models — flow_accumlation_wb","text":"dem_file_path path digital elevation file ModelFolder Output path save model outputs watershed_shape_path Optional shapefile clip resulting results max_dist numeric value meters breach digital elevation model stream_threshold Flow accumulation number (cells) create channels carve numeric. Number meters carve channel network . overwrite T/F. TRUE, model overwrite previous files Model Folder","code":""},{"path":"/reference/flow_accumlation_wb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hydrological pre-processing workflow for digital elevation models — flow_accumlation_wb","text":"SpatRaster modified digital elevation model","code":""},{"path":"/reference/flow_accumlation_wb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hydrological pre-processing workflow for digital elevation models — flow_accumlation_wb","text":"","code":"ModelFolder <- tempdir() # Create a temporary directory to save files into"},{"path":"/reference/folderCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to check and adjust the WatershedElements Folder Wrapper function of system.file to check if the folder containing the model elements exists and returns the path to the folder. Will default to package elements if no file is found. — folderCheck","title":"Function to check and adjust the WatershedElements Folder Wrapper function of system.file to check if the folder containing the model elements exists and returns the path to the folder. Will default to package elements if no file is found. — folderCheck","text":"Function check adjust WatershedElements Folder Wrapper function system.file check folder containing model elements exists returns path folder. default package elements file found.","code":""},{"path":"/reference/folderCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to check and adjust the WatershedElements Folder Wrapper function of system.file to check if the folder containing the model elements exists and returns the path to the folder. Will default to package elements if no file is found. — folderCheck","text":"","code":"folderCheck(folder, example_file = \"dem.tif\", demo = T)"},{"path":"/reference/folderCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to check and adjust the WatershedElements Folder Wrapper function of system.file to check if the folder containing the model elements exists and returns the path to the folder. Will default to package elements if no file is found. — folderCheck","text":"folder Folder path check example_file Default \"dem.tif'. File name + extension check within folder. demo boolean. TRUE, use demo elements folder input folder found","code":""},{"path":"/reference/folderCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to check and adjust the WatershedElements Folder Wrapper function of system.file to check if the folder containing the model elements exists and returns the path to the folder. Will default to package elements if no file is found. — folderCheck","text":"Directory folder path. Demo folder demo = T.","code":""},{"path":"/reference/folderCheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to check and adjust the WatershedElements Folder Wrapper function of system.file to check if the folder containing the model elements exists and returns the path to the folder. Will default to package elements if no file is found. — folderCheck","text":"","code":"if (FALSE) { folderPath <- \"./WatershedElements\" WatershedElements <- folderCheck(folderPath, \"dem.tif\", demo = T) WatershedElements } # Returns demo folder"},{"path":"/reference/smoothStream.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to take a collection of vector streams lines and burn in the elevation profiles into the model — smoothStream","title":"Function to take a collection of vector streams lines and burn in the elevation profiles into the model — smoothStream","text":"Function take collection vector streams lines burn elevation profiles model","code":""},{"path":"/reference/smoothStream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to take a collection of vector streams lines and burn in the elevation profiles into the model — smoothStream","text":"","code":"smoothStream(stream, demPath, outpath = NULL)"},{"path":"/reference/smoothStream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to take a collection of vector streams lines and burn in the elevation profiles into the model — smoothStream","text":"stream SpatVector file path containing stream lines demPath File path SpatRaster outpath Optional: Output path. saved \"smooth_dem.tif\"","code":""},{"path":"/reference/smoothStream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to take a collection of vector streams lines and burn in the elevation profiles into the model — smoothStream","text":"SpatRaster stream network burned .","code":""},{"path":"/reference/smoothStream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to take a collection of vector streams lines and burn in the elevation profiles into the model — smoothStream","text":"","code":"if (FALSE) { smooth_dem <- smoothStream(streamVector, demPath) }"},{"path":"/reference/smoothVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust stream channel elevations to remove pits — smoothVector","title":"Adjust stream channel elevations to remove pits — smoothVector","text":"Adjust stream channel elevations remove pits","code":""},{"path":"/reference/smoothVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust stream channel elevations to remove pits — smoothVector","text":"","code":"smoothVector(x, n = 1000, h_adj = 0.01)"},{"path":"/reference/smoothVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust stream channel elevations to remove pits — smoothVector","text":"x vector elevation values n maximum number iterations fix elevations h_adj additional increment smoothed locations Default 0.01.","code":""},{"path":"/reference/smoothVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust stream channel elevations to remove pits — smoothVector","text":"Smoothed vector elevations","code":""},{"path":"/reference/smoothVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust stream channel elevations to remove pits — smoothVector","text":"","code":"example_stream <- c(1,2,3,5,3,2,6) smooth <- smoothVector(example_stream)  # If NA's are present s2 <- c(1,2,4,5,NA,6) smooth <- smoothVector(s2)"}]
